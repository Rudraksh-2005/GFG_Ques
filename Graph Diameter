class Solution {
  public:
    int maxDist=-1;
     int farthestNode = 0;
     void dfs(int node, vector<bool>&visited, int dist, unordered_map<int, vector<int>>& adj) {
        if (dist > maxDist) {
            maxDist = dist;
            farthestNode = node;
        }
        visited[node]=true;
        for (auto& nbr : adj[node]) {
            if (!visited[nbr]) {
                dfs(nbr, visited, dist + 1, adj);
            }
        }
        visited[node]=false;
    }
    int diameter(int V, vector<vector<int>>& edges) {
        unordered_map<int, vector<int>> adj;
        vector<bool>visited(V,0);
        for (auto& e : edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }
        dfs(0, visited, 0, adj);
        dfs(farthestNode, visited, 0, adj);
        return maxDist;
    }
};
